name: MediaFire Downloader

on:
  push:
    branches:
      - main
  workflow_dispatch:
  repository_dispatch:
    types: [new_url_received]
jobs:
  download_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Diperlukan untuk membuat rilis GitHub

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set MediaFire Page URL as environment variable
      run: |
        echo "MEDIAFIRE_PAGE_URL=${{ github.event.client_payload.url }}" >> $GITHUB_ENV

    - name: Run MediaFire Downloader Script
      run: python download_mediafire.py

    - name: Get Download URL and Filename
      id: get_filename
      run: |
        DOWNLOAD_URL=$(cat download_link.txt)
        FILE_NAME=$(basename "$DOWNLOAD_URL")
        echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check if file already exists in latest release
      id: check_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Menggunakan GitHub CLI untuk mendapatkan URL unduhan dari rilis terbaru
        RELEASE_URL=$(gh release view --json assets -q ".assets[] | select(.name == \"${{ steps.get_filename.outputs.file_name }}\") | .url")
        if [ -n "$RELEASE_URL" ]; then
          echo "File ${{ steps.get_filename.outputs.file_name }} sudah ada di rilis. Melewati pengunggahan."
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "File belum ada. Melanjutkan pengunduhan dan pengunggahan."
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Download File if not already released
      if: steps.check_release.outputs.skip == 'false'
      run: |
        DOWNLOAD_URL=$(cat download_link.txt)
        FILE_NAME=${{ steps.get_filename.outputs.file_name }}
        wget -O "$FILE_NAME" "$DOWNLOAD_URL"
      shell: bash

    - name: Create GitHub Release
      if: steps.check_release.outputs.skip == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: release-${{ github.run_number }}
        name: Automatic MediaFire Download ${{ github.run_number }}
        body: |
          Rilis otomatis dari MediaFire.
          File: ${{ steps.get_filename.outputs.file_name }}
        files: ${{ steps.get_filename.outputs.file_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
