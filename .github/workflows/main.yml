name: MediaFire Downloader

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  download_and_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Diperlukan untuk membuat rilis GitHub

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set MediaFire Page URL as environment variable
      run: |
        echo "MEDIAFIRE_PAGE_URL=https://www.mediafire.com/file_premium/dwa3274aece6bax/GH-Saves_Part4_v0.54and-up.zip/file" >> $GITHUB_ENV

    - name: Run MediaFire Downloader Script
      run: python download_mediafire.py

    - name: Install GitHub CLI
      uses: actions/setup-cli@v1
      with:
        gh-version: 2.39.0 # Anda bisa menggunakan versi terbaru yang stabil

    - name: Get Download URL and Filename
      id: get_filename
      run: |
        DOWNLOAD_URL=$(cat download_link.txt)
        FILE_NAME=$(basename "$DOWNLOAD_URL")
        echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
      shell: bash

    - name: Check if file already exists in latest release
      id: check_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Otentikasi GitHub CLI
        gh auth login --with-token <<< "$GH_TOKEN"
        # Dapatkan ID rilis terbaru (biasanya yang memiliki tag 'latest')
        LATEST_RELEASE_ID=$(gh release list --json id --jq 'map(select(.tag_name | contains("latest")))[0].id // ""')

        if [ -z "$LATEST_RELEASE_ID" ]; then
          echo "Tidak ada rilis 'latest' yang ditemukan. Membuat rilis baru."
          LATEST_RELEASE_ID=$(gh release create release-latest --title "Latest Release" --notes "Auto-generated release" --public --yes)
          echo "Created new release ID: $LATEST_RELEASE_ID"
        else
          echo "Rilis 'latest' ditemukan dengan ID: $LATEST_RELEASE_ID"
        fi
        echo "release_id=$LATEST_RELEASE_ID" >> $GITHUB_OUTPUT

        # Periksa apakah file sudah ada di rilis yang ditemukan/dibuat
        # Perintah ini akan mengembalikan 0 jika file ditemukan, dan non-zero jika tidak
        gh release assets $LATEST_RELEASE_ID | grep -q "${{ steps.get_filename.outputs.file_name }}"
        FILE_EXISTS=$?

        if [ $FILE_EXISTS -eq 0 ]; then
          echo "File ${{ steps.get_filename.outputs.file_name }} sudah ada di rilis. Melewati pengunggahan."
          echo "skip=true" >> $GITHUB_OUTPUT
        else
          echo "File belum ada. Melanjutkan pengunduhan dan pengunggahan."
          echo "skip=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Download File if not already released
      if: steps.check_release.outputs.skip == 'false'
      run: |
        DOWNLOAD_URL=$(cat download_link.txt)
        FILE_NAME=${{ steps.get_filename.outputs.file_name }}
        wget -O "$FILE_NAME" "$DOWNLOAD_URL"
      shell: bash

    - name: Upload file to the latest release
      if: steps.check_release.outputs.skip == 'false'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RELEASE_ID: ${{ steps.check_release.outputs.release_id }}
        FILE_TO_UPLOAD: ${{ steps.get_filename.outputs.file_name }}
      run: |
        gh release upload $RELEASE_ID $FILE_TO_UPLOAD
      shell: bash
