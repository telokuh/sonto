name: Bot Automation Workflows

# Trigger workflow ini saat event repository_dispatch dikirim dari bot.py (Pyrogram/Flask)
on:
  repository_dispatch:
    types: [new_url_received, refresh_token_received] # <<< Sekarang mendengarkan kedua event

jobs:
  # =========================================================================
  # JOB 1: STORE REFRESH TOKEN (BARU)
  # Dipicu oleh Flask /oauth_callback. Bertugas menyimpan Refresh Token.
  # =========================================================================
  store_refresh_token:
    # Hanya jalankan jika event type-nya adalah 'refresh_token_received'
    if: github.event.action == 'refresh_token_received'
    runs-on: ubuntu-latest
    
    # Variabel dari payload dan GitHub Vars
    env:
      OWNER_ID: ${{ vars.OWNER_ID }} 
      PAYLOAD_CHAT_ID: ${{ github.event.client_payload.sender_chat_id }}
      NEW_REFRESH_TOKEN: ${{ github.event.client_payload.refresh_token }}
      
      IS_OWNER_AUTH: ${{ github.event.client_payload.sender_chat_id == vars.OWNER_ID }}
      OWNER_SECRET_NAME: DRIVE_REFRESH_TOKEN_OWNER
      
    steps:
      - name: Checkout Repository (Diperlukan untuk gh CLI)
        uses: actions/checkout@v4
        
      - name: Hitung Nama Secret Target
        id: secret_name_calc
        run: |
          TARGET_NAME=""
          # Jika chat ID sama, gunakan nama pemilik.
          if [ "${{ env.IS_OWNER_AUTH }}" == "true" ]; then
            TARGET_NAME="${{ env.OWNER_SECRET_NAME }}"
          else
            # Jika user lain, buat Secret unik berdasarkan Chat ID
            TARGET_NAME="DRIVE_REFRESH_TOKEN_USER_${{ env.PAYLOAD_CHAT_ID }}"
          fi
          echo "target_secret_name=$TARGET_NAME" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Perbarui GitHub Secret (Simpan Refresh Token)
        run: |
          TARGET_SECRET_NAME="${{ steps.secret_name_calc.outputs.target_secret_name }}"

          echo "âœ… Menyimpan Refresh Token ke Secret: $TARGET_SECRET_NAME"
          
          # Gunakan GitHub CLI (gh) untuk memperbarui atau membuat Secret
          gh variable set "$TARGET_SECRET_NAME" --body "${{ env.NEW_REFRESH_TOKEN }}" --repo ${{ github.repository }}
        
        env:
          GH_TOKEN: ${{ vars.GH_PAT }} 
          
  # =========================================================================
  # JOB 2: DOWNLOAD DAN RELEASE (DISESUAIKAN)
  # Dipicu saat URL download diterima (new_url_received).
  # Semua logika auth yang lama sudah DIHAPUS.
  # =========================================================================
  download-and-release:
    # Hanya jalankan jika event type-nya adalah 'new_url_received'
    if: github.event.action == 'new_url_received'
    runs-on: ubuntu-latest
    permissions:
      contents: write # Diperlukan untuk checkout dan release
      
    # Definisi Variabel Bantu (Sekarang hanya untuk URL download)
    env:
      PAYLOAD_URL: ${{ github.event.client_payload.url }}
      TOKEN: ${{ github.event.client_payload.sender == vars.OWNER_ID && vars.DRIVER_TOKEN_OWNER || vars[format('DRIVER_REFRESH_TOKEN_USER_{0}', github.event.client_payload.sender)] }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

# ------------------------------------------------------------------------------------------
# --- CABANG UNTUK PEMROSESAN URL (DOWNLOAD & RELEASE) ---
# ------------------------------------------------------------------------------------------

      - name: Grant permissions to APT cache
        run: |
          sudo chown -R $USER:$USER /var/cache/apt
          sudo chown -R $USER:$USER /var/lib/apt
          
      - name: Cache APT packages
        # HANYA JALANKAN jika URL mengandung 'mega.nz'
        if: contains(env.PAYLOAD_URL, 'mega.nz')
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-megatools
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Disable installing package docs
        #if: contains(env.PAYLOAD_URL, 'mega.nz')
        run: |
          sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
          path-exclude /usr/share/doc/*
          path-exclude /usr/share/man/*
          path-exclude /usr/share/info/*
          EOF

      - name: Install megatools
        if: contains(env.PAYLOAD_URL, 'mega.nz')
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y megatools

      - name: Create YouTube cookies file from secret
        env:
          YOUTUBE_COOKIES_SECRET: ${{ secrets.YOUTUBE_COOKIES }}
        # Jika secret ada, buat file
        if: env.YOUTUBE_COOKIES_SECRET != ''
        run: |
          echo "$YOUTUBE_COOKIES_SECRET" > cookies.txt

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}

      - name: dependency pip
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo ".venv/bin" >> $GITHUB_PATH
          # Skip pip install if venv cache is found
          if [ "${{ steps.cache-venv.outputs.cache-hit }}" != "true" ]; then
          pip install -r requirements.txt
          fi

      - name: Run Downloader Script
        run: python main.py
        env:
          API_ID: ${{ vars.API_ID }}
          API_HASH: ${{ vars.API_HASH }}
          BOT_TOKEN: ${{ vars.BOT_TOKEN }}
          OWNER_ID: ${{ vars.OWNER_ID }}
          MEDIAFIRE_PAGE_URL: ${{ env.PAYLOAD_URL }}
          RCLONE_CONFIG: rclone.conf
          # Secret Refresh Token harus diambil di sini, tetapi karena tidak ada logic
          # pengambilan Secret di Python, Anda perlu menyesuaikan main.py
          # atau mengirim Secret sebagai Environment Variable.
          
      - name: Get Downloaded Filename
        id: get_filename
        run: |
          if [ ! -f "downloaded_filename.txt" ]; then
          echo "Error: downloaded_filename.txt not found. Exiting."
          exit 1
          fi
          FILE_NAME=$(cat downloaded_filename.txt | tr -d '\n')
          echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
        shell: bash


      - name : upload 
        run: python -v #upload.py
        shell: bash
        env:
          # Pastikan Anda punya GH_PAT, GOOGLE_CLIENT_ID, dan GOOGLE_CLIENT_SECRET di secrets
          GH_TOKEN: ${{ vars.GH_PAT }} 
          DRIVE_REFRESH_TOKEN: ${{ env.TOKEN }}
          GOOGLE_CLIENT_ID: ${{ vars.CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ vars.CLIENT_SECRET }}
          FILENAME: ${{ steps.get_filename.outputs.file_name }}
          

      - name: Clean up apt cache
        run: |
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -rf /var/cache/apt/archives/partial
          sudo rm -rf /var/lib/apt/lists/partial
