name: Download and Release

on:
  repository_dispatch:
    types: [new_url_received]

jobs:
  download-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Cache rclone installation
        id: cache-rclone
        uses: actions/cache@v4
        with:
          path: ~/bin/rclone
          key: ${{ runner.os }}-rclone-v1
          
      - name: Install rclone (if not in cache)
        if: steps.cache-rclone.outputs.cache-hit != 'true'
        run: |
          # URL yang selalu mengarah ke versi terbaru
          RCLONE_URL="https://downloads.rclone.org/rclone-current-linux-amd64.zip"
          mkdir -p ~/bin
          # Download, unzip, dan pindahkan
          curl -sL "$RCLONE_URL" -o rclone.zip
          unzip rclone.zip
          
          # Pindahkan binary ke direktori pengguna dan jadikan executable
          mv rclone-*/rclone ~/bin/
          chmod +x ~/bin/rclone
          
          echo "Rclone installed successfully"

      - name: Add rclone to PATH
        run: echo "$HOME/bin" >> $GITHUB_PATH

      - name: Create rclone config file from secret
        env:
          RCLONE_CONFIG_SECRET: ${{ secrets.RCLONE_CONFIG_FILE }}
        run: |
          echo "$RCLONE_CONFIG_SECRET" > rclone.conf

      - name: Create YouTube cookies file from secret
        env:
          YOUTUBE_COOKIES_SECRET: ${{ secrets.YOUTUBE_COOKIES }}
        if: env.YOUTUBE_COOKIES_SECRET != ''
        run: |
          echo "$YOUTUBE_COOKIES_SECRET" > cookies.txt

      - name: Run Downloader Script
        env:
          API_ID: ${{ secrets.API_ID }}
          API_HASH: ${{ secrets.API_HASH }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          OWNER_ID: ${{ secrets.OWNER_ID }}
          MEDIAFIRE_PAGE_URL: ${{ github.event.client_payload.url }}
          RCLONE_CONFIG: rclone.conf
        run: python3 mediafire_downloader.py

      - name: Create rclone config file from secret
        env:
          RCLONE_CONFIG_SECRET: ${{ secrets.RCLONE_CONFIG_FILE }}
        run: |
          echo "$RCLONE_CONFIG_SECRET" > rclone.conf


      - name: Create rclone config file from secret
        env:
          RCLONE_CONFIG_SECRET: ${{ vars.RCLONE }}
        run: |
          echo "$RCLONE_CONFIG_SECRET" > rclone.conf

      - name: Create YouTube cookies file from secret
        env:
          YOUTUBE_COOKIES_SECRET: ${{ secrets.YOUTUBE_COOKIES }}
        if: env.YOUTUBE_COOKIES_SECRET != ''
        run: |
          echo "$YOUTUBE_COOKIES_SECRET" > cookies.txt

      - name: Run Downloader Script
        env:
          API_ID: ${{ vars.API_ID }}
          API_HASH: ${{ vars.API_HASH }}
          BOT_TOKEN: ${{ vars.BOT_TOKEN }}
          OWNER_ID: ${{ vars.OWNER_ID }}
          MEDIAFIRE_PAGE_URL: ${{ github.event.client_payload.url }}
          RCLONE_CONFIG: rclone.conf
        run: python3 mediafire_downloader.py

      - name: Get Downloaded Filename
        id: get_filename
        run: |
         if [ ! -f "downloaded_filename.txt" ]; then
          echo "Error: downloaded_filename.txt not found. Exiting."
          exit 1
         fi
         FILE_NAME=$(cat downloaded_filename.txt)
         echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
         tag_name: release-${{ github.run_number }}
         name: Automatic MediaFire Download ${{ github.run_number }}
         body: |
          Rilis otomatis dari MediaFire.
          URL: ${{ github.event.client_payload.url }}
          File: ${{ steps.get_filename.outputs.file_name }}
         files: ${{ steps.get_filename.outputs.file_name }}
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
