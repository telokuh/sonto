name: Download and Release

on:
  repository_dispatch:
    types: [new_url_received]

jobs:
  download-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Grant permissions to APT cache
        run: |
          sudo chown -R $USER:$USER /var/cache/apt
          sudo chown -R $USER:$USER /var/lib/apt


      - name: Cache APT packages
        uses: actions/cache@v3
        with:
          path: |
           /var/cache/apt/archives
           /var/lib/apt/lists
          key: ${{ runner.os }}-apt-megatools
          restore-keys: |
           ${{ runner.os }}-apt-
           

      - name: Disable installing package docs
        run: |
           sudo tee /etc/dpkg/dpkg.cfg.d/01_nodoc > /dev/null << 'EOF'
           path-exclude /usr/share/doc/*
           path-exclude /usr/share/man/*
           path-exclude /usr/share/info/*
           EOF

      - name: Install megatools
        run: |
          #sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y megatools
          


      - name: Create YouTube cookies file from secret
        env:
          YOUTUBE_COOKIES_SECRET: ${{ secrets.YOUTUBE_COOKIES }}
        if: env.YOUTUBE_COOKIES_SECRET != ''
        run: |
          echo "$YOUTUBE_COOKIES_SECRET" > cookies.txt

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}



      - name: dependency pip
        run: |
          
          python -m venv .venv
          source .venv/bin/activate
          echo ".venv/bin" >> $GITHUB_PATH
          # Skip pip install if venv cache is found
          if [ "${{ steps.cache-venv.outputs.cache-hit }}" != "true" ]; then
          pip install -r requirements.txt
          fi
          
      - name: Run Downloader Script
        run: python main.py
        env:
          API_ID: ${{ vars.API_ID }}
          API_HASH: ${{ vars.API_HASH }}
          BOT_TOKEN: ${{ vars.BOT_TOKEN }}
          OWNER_ID: ${{ vars.OWNER_ID }}
          MEDIAFIRE_PAGE_URL: ${{ github.event.client_payload.url }}
          RCLONE_CONFIG: rclone.conf
        
        

      - name: Get Downloaded Filename
        id: get_filename
        run: |
         if [ ! -f "downloaded_filename.txt" ]; then
          echo "Error: downloaded_filename.txt not found. Exiting."
          exit 1
         fi
         FILE_NAME=$(cat downloaded_filename.txt | tr -d '\n')
         echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
         tag_name: release-${{ github.run_number }}
         name: File ${{ steps.get_filename.outputs.file_name }}
         body: |
          Rilis 
          File: ${{ steps.get_filename.outputs.file_name }}
         files: ${{ steps.get_filename.outputs.file_name }}
        #env:
         #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      - name: Clean up apt cache
        run: |
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -rf /var/cache/apt/archives/partial
          sudo rm -rf /var/lib/apt/lists/partial
