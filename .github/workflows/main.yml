name: Bot Automation Workflows

on:
  repository_dispatch:
    types: [new_url_received, refresh_token_received]

jobs:
  store_refresh_token:
    if: github.event.action == 'refresh_token_received'
    runs-on: ubuntu-latest
    
    env:
      OWNER_ID: ${{ vars.OWNER_ID }} 
      PAYLOAD_CHAT_ID: ${{ github.event.client_payload.sender_chat_id }}
      NEW_REFRESH_TOKEN: ${{ github.event.client_payload.refresh_token }}
      IS_OWNER_AUTH: ${{ github.event.client_payload.sender_chat_id == vars.OWNER_ID }}
      OWNER_SECRET_NAME: DRIVE_REFRESH_TOKEN_OWNER
      
    steps:
      - name: Checkout Repository (For gh CLI)
        uses: actions/checkout@v4
        
      - name: Calculate Target Variable Name
        id: secret_name_calc
        run: |
          TARGET_NAME=""
          if [ "${{ env.IS_OWNER_AUTH }}" == "true" ]; then
            TARGET_NAME="${{ env.OWNER_SECRET_NAME }}"
          else
            TARGET_NAME="DRIVE_REFRESH_TOKEN_USER_${{ env.PAYLOAD_CHAT_ID }}"
          fi
          echo "target_secret_name=$TARGET_NAME" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Update GitHub Variable (Store Refresh Token)
        run: |
          TARGET_SECRET_NAME="${{ steps.secret_name_calc.outputs.target_secret_name }}"
          echo "âœ… Storing Refresh Token to Variable: $TARGET_SECRET_NAME"
          # Use GitHub CLI (gh) to update or create Variable
          gh variable set "$TARGET_SECRET_NAME" --body "${{ env.NEW_REFRESH_TOKEN }}" --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ vars.GH_PAT }} 
          
# -----------------------------------------------------------------------------
  
  download-and-release:
    if: github.event.action == 'new_url_received'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    env:
      PAYLOAD_URL: ${{ github.event.client_payload.url }}
      PAYLOAD_SENDER: ${{ github.event.client_payload.sender }} # Tambahkan ini untuk akses mudah

    steps:
      
      # --- START: Setel Refresh Token Secara Kondisional (Perbaikan Stabilitas) ---
      
      - name: Set Owner Refresh Token
        # Jika sender ID sama dengan OWNER_ID
        if: env.PAYLOAD_SENDER == vars.OWNER_ID
        run: |
          # Ambil NILAI dari vars.DRIVER_TOKEN_OWNER dan setel ke ENV
          echo "DRIVE_REFRESH_TOKEN=${{ vars.DRIVE_REFRESH_TOKEN_OWNER }}" >> $GITHUB_ENV
        shell: bash

      - name: Set User Refresh Token
        # Jika sender ID berbeda
        if: env.PAYLOAD_SENDER != vars.OWNER_ID
        run: |
          # Bangun kunci dinamis dan ambil NILAI dari vars
          DYNAMIC_VALUE="${{ vars[format('DRIVE_REFRESH_TOKEN_USER_{0}', env.PAYLOAD_SENDER)] }}"
          echo "DRIVE_REFRESH_TOKEN=$DYNAMIC_VALUE" >> $GITHUB_ENV
        shell: bash
        
      # --- END: Setel Refresh Token Secara Kondisional ---
      
      - name: Checkout repository
        uses: actions/checkout@v4

# -----------------------------------------------------------------------------
# --- CABANG UNTUK PEMROSESAN URL (DOWNLOAD & RELEASE) ---
# -----------------------------------------------------------------------------
      
      # ... (Steps untuk cache dan install megatools dihilangkan untuk ringkas) ...

      - name: Grant permissions to APT cache
        run: |
          sudo chown -R $USER:$USER /var/cache/apt
          sudo chown -R $USER:$USER /var/lib/apt
          
      - name: Cache APT packages
        if: contains(env.PAYLOAD_URL, 'mega.nz')
        uses: actions/cache@v3
        with:
          path: |
            /var/cache/apt/archives
            /var/lib/apt/lists
          key: ${{ runner.os }}-apt-megatools
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install megatools
        if: contains(env.PAYLOAD_URL, 'mega.nz')
        run: |
          sudo DEBIAN_FRONTEND=noninteractive apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y megatools
          
      - name: Create YouTube cookies file from secret
        env:
          YOUTUBE_COOKIES_SECRET: ${{ secrets.YOUTUBE_COOKIES }}
        if: env.YOUTUBE_COOKIES_SECRET != ''
        run: |
          echo "$YOUTUBE_COOKIES_SECRET" > cookies.txt

      - name: Cache venv
        id: cache-venv
        uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('requirements.txt') }}

      - name: dependency pip
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo ".venv/bin" >> $GITHUB_PATH
          if [ "${{ steps.cache-venv.outputs.cache-hit }}" != "true" ]; then
          pip install -r requirements.txt
          fi

      - name: Run Downloader Script
        run: python main.py
        env:
          API_ID: ${{ vars.API_ID }}
          API_HASH: ${{ vars.API_HASH }}
          BOT_TOKEN: ${{ vars.BOT_TOKEN }}
          OWNER_ID: ${{ vars.OWNER_ID }}
          MEDIAFIRE_PAGE_URL: ${{ env.PAYLOAD_URL }}
          RCLONE_CONFIG: rclone.conf
          # Token sekarang diakses dari $GITHUB_ENV
          DRIVE_REFRESH_TOKEN: ${{ env.DRIVE_REFRESH_TOKEN }} 
          
      - name: Get Downloaded Filename
        id: get_filename
        run: |
          if [ ! -f "downloaded_filename.txt" ]; then
          echo "Error: downloaded_filename.txt not found. Exiting."
          exit 1
          fi
          FILE_NAME=$(cat downloaded_filename.txt | tr -d '\n')
          echo "file_name=$FILE_NAME" >> $GITHUB_OUTPUT
        shell: bash


      - name : upload 
        run: python upload.py
        shell: bash
        env:
          GH_TOKEN: ${{ vars.GH_PAT }} 
          # Token sekarang diakses dari $GITHUB_ENV
          DRIVE_REFRESH_TOKEN: ${{ env.DRIVE_REFRESH_TOKEN }}
          GOOGLE_CLIENT_ID: ${{ vars.CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ vars.CLIENT_SECRET }}
          FILENAME: ${{ steps.get_filename.outputs.file_name }}
          

      - name: Clean up apt cache
        run: |
          sudo rm -f /var/cache/apt/archives/lock
          sudo rm -f /var/lib/apt/lists/lock
          sudo rm -rf /var/cache/apt/archives/partial
          sudo rm -rf /var/lib/apt/lists/partial
